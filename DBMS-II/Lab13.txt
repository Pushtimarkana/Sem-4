------------Part – A (Use collection “Stock” created in Lab-12)------
1. Create an index on the company field in the stocks collection.
db.Stock.createIndex({company:1})

2. Create a compound index on the sector and sales fields in the stocks collection.
db.Stock.createIndex({sectore:1,sales:1})


3. List all the indexes created on the stocks collection.
db.Stock.getIndexes()


4. Drop an existing index on the company field from the stocks collection.
db.Stock.dropIndex({company:1})

5. Use a cursor to retrieve and iterate over documents in the stocks collection, displaying each document.
const cursor_1=db.Stock.find()
cursor_1

6. Limit the number of documents returned by a cursor to the first 3 documents in the stocks collection.
const c2=db.Stock.find().limit(3)
c2

7. Sort the documents returned by a cursor in descending order based on the sales field.
const s3=db.Stock.find().sort({sales:-1})
s3

8. Skip the first 2 documents in the result set and return the next documents using the cursor.
const c4= db.Stock.find().skip(2)
c4

9. Convert the cursor to an array and return all documents from the stocks collection.
const c5= db.Stock.find().toArray()
c5

10. Create a collection named "Companies" with schema validation to ensure that each document must
contains a company field (string) and a sector field (string).
db.createCollection("Companies",{
validator:{
	$jsonSchema:{
			bsonType:"object",
			required:["company","sector"],
			properties:{
        company:{bsonType:"string",description:"must be string data"},
				sector:{bsonType:"string",description:"must be string data"}
			}
		}
	}
})

--------------------------Part B-----------------------
1. Create a collection named "Scripts" with validation for fields like eps, pe, and roe to ensure that they
are numbers and required/compulsory fields.

db.createCollection("Scripts",{
validator:{
	$jsonSchema:{
			bsonType:"object",
			required:["eps","pe","roe"],
			properties:{
        eps:{bsonType:"int",description:"must be number data"},
				pe:{bsonType:"int",description:"must be number data"},
				roe:{bsonType:"int",description:"must be number data"}
			}
		}
	}
})



2. Create a collection named "Products" where each product has an embedded document for
manufacturer details and a multivalued field for categories that stores an array of category names the
product belongs to.
 manufacturer details: The manufacturer will be an embedded document with fields like name,
country, and establishedYear.
 categories: The categories will be an array field that holds multiple values. (i.e. Electronics,
Mobile, Smart Devices).

db.createCollection("Products", {
    validator: {
        $jsonSchema: {
            bsonType: "object",
            required: ["manufacturer", "categories"],
            properties: {
                manufacturer: {
                    bsonType: "object",
                    required: ["name", "country", "establishedYear"],
                    properties: {
                        name: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        country: {
                            bsonType: "string",
                            description: "must be a string and is required"
                        },
                        establishedYear: {
                            bsonType: "int",
                            description: "must be an integer and is required"
                        }
                    }
                },
                categories: {
                    bsonType: "array",
                    items: {
                        bsonType: "string"
                    },
                    description: "must be an array of strings"
                }
            }
        }
    }
});

-------------------part C----------------------


1. Create a collection named “financial_Reports” that requires revenue (a positive number) but allows
optional fields like expenses and netIncome (if provided, they should also be numbers).



2. Create a collection named "Student" where each student has name and address are embedded
document and mobilenumber and emailaddress are multivalued field that stores an array of values.