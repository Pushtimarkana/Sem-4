------------------AFTER TRIGGER--------------------

CREATE TABLE EMPLOYEEDETAILS
(
	EmployeeID Int Primary Key,
	EmployeeName Varchar(100) Not Null,
	ContactNo Varchar(100) Not Null,
	Department Varchar(100) Not Null,
	Salary Decimal(10,2) Not Null,
	JoiningDate DateTime Null
)

CREATE TABLE EmployeeLogs (
    LogID INT PRIMARY KEY IDENTITY(1,1),
    EmployeeID INT NOT NULL,
    EmployeeName VARCHAR(100) NOT NULL,
    ActionPerformed VARCHAR(100) NOT NULL,
    ActionDate DATETIME NOT NULL
);

SELECT * FROM EMPLOYEEDETAILS
SELECT * FROM EmployeeLogs

--1)	Create a trigger that fires AFTER INSERT, UPDATE, and DELETE operations on the EmployeeDetails table to display the message "Employee record inserted", "Employee record updated", "Employee record deleted"

CREATE OR ALTER TRIGGER TR_INSERT_MSG
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	PRINT 'Employee record inserted'
END

INSERT INTO EMPLOYEEDETAILS VALUES(101,'PUSHTI','1234567890','CSE',50000.00,'2027-05-19')

CREATE OR ALTER TRIGGER TR_UPDATE_MSG
ON EMPLOYEEDETAILS
AFTER UPDATE
AS
BEGIN
	PRINT 'Employee record UPDATED'
END

UPDATE EMPLOYEEDETAILS SET Department='IT' WHERE EmployeeID=101

CREATE OR ALTER TRIGGER TR_DELETE_MSG
ON EMPLOYEEDETAILS
AFTER DELETE
AS
BEGIN
	PRINT 'Employee record DELETED'
END

DELETE EMPLOYEEDETAILS WHERE EmployeeID=101

--2)	Create a trigger that fires AFTER INSERT, UPDATE, and DELETE operations on the EmployeeDetails table to log all operations into the EmployeeLog table.

CREATE OR ALTER TRIGGER TR_INSERT_LOG
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @EID INT,@ENAME VARCHAR(250)
	SELECT @EID = EmployeeID FROM inserted
	SELECT @ENAME=EmployeeName FROM inserted

	INSERT INTO EmployeeLogs VALUES(@EID,@ENAME,'INSERT',GETDATE())

END

INSERT INTO EMPLOYEEDETAILS VALUES(103,'ABCD','1234567890','CSE',25000.00,'2027-05-19')

CREATE OR ALTER TRIGGER TR_UPDATE_LOG
ON EMPLOYEEDETAILS
AFTER UPDATE
AS
BEGIN
	DECLARE @EID INT,@ENAME VARCHAR(250)
	SELECT @EID = EmployeeID FROM inserted
	SELECT @ENAME=EmployeeName FROM inserted

	INSERT INTO EmployeeLogs VALUES(@EID,@ENAME,'UPDATE',GETDATE())

END

UPDATE EMPLOYEEDETAILS SET Department='IT' WHERE EmployeeID=103

CREATE OR ALTER TRIGGER TR_DELETE_LOG
ON EMPLOYEEDETAILS
AFTER DELETE
AS
BEGIN
	DECLARE @EID INT,@ENAME VARCHAR(250)
	SELECT @EID = EmployeeID FROM deleted
	SELECT @ENAME=EmployeeName FROM deleted

	INSERT INTO EmployeeLogs VALUES(@EID,@ENAME,'DELETE',GETDATE())

END

DELETE EMPLOYEEDETAILS WHERE EmployeeID=103

--3)	Create a trigger that fires AFTER INSERT to automatically calculate the joining bonus (10% of the salary) for new employees and update a bonus column in the EmployeeDetails table.

CREATE OR ALTER TRIGGER TR_INSERT_BONUS
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
		DECLARE @SAL DECIMAL(8,2),@EID INT
		SELECT @SAL=Salary FROM inserted
		SELECT @EID = EmployeeID FROM inserted
		UPDATE EMPLOYEEDETAILS
		SET Salary=@SAL*1.1
		WHERE EmployeeID=@EID
END

INSERT INTO EMPLOYEEDETAILS VALUES(104,'EYZ','1234567890','IT',25000.00,'2027-05-19')

--4)	Create a trigger to ensure that the JoiningDate is automatically set to the current date if it is NULL during an INSERT operation.
CREATE OR ALTER TRIGGER TR_UPDATE_DATE_EMP
ON EMPLOYEEDETAILS
AFTER INSERT
AS
BEGIN
	DECLARE @EID INT,@JDATE DATETIME
	SELECT @EID = EmployeeID FROM inserted
	SELECT @JDATE= JoiningDate FROM inserted

	INSERT INTO EMPLOYEEDETAILS(EmployeeID,EmployeeName,ContactNo,Department,Salary,JoiningDate)
	SELECT * FROM inserted
	UPDATE EMPLOYEEDETAILS SET JoiningDate=GETDATE() WHERE @JDATE IS NULL
	--IF (@JDATE IS NULL)
	--BEGIN
	--	UPDATE PersonInfo SET JoiningDate=GETDATE() WHERE PersonID=@PID
	--END
END

INSERT INTO EMPLOYEEDETAILS VALUES(105,'XYZ','1234567890','IT',25000.00,NULL)
DELETE FROM EMPLOYEEDETAILS WHERE EmployeeID=105

--5)	Create a trigger that ensure that ContactNo is valid during insert and update (Like ContactNo length is 10)
CREATE OR ALTER TRIGGER TR_CONTACTNO
ON EMPLOYEEDETAILS
AFTER INSERT,UPDATE
AS
BEGIN
		DECLARE @EID INT,@CNo VARCHAR(100)

		SELECT @EID=EmployeeID FROM inserted
		SELECT @CNO=ContactNo  FROM inserted

		IF (LEN(@CNo)!=10)
			PRINT 'CONTACT NUMBER IS NOT IN 10 DIGIT'
			UPDATE EMPLOYEEDETAILS SET ContactNo = '1234567890' WHERE  EmployeeID= (SELECT EmployeeID FROM inserted)
END


INSERT INTO EMPLOYEEDETAILS VALUES(106,'ABC','123456789012365','IT',25000.00,'2027-05-19') 


-------------------------------INSTEAD OF TRIGGER-------------
CREATE TABLE Movies (
    MovieID INT PRIMARY KEY,
    MovieTitle VARCHAR(255) NOT NULL,
    ReleaseYear INT NOT NULL,
    Genre VARCHAR(100) NOT NULL,
    Rating DECIMAL(3, 1) NOT NULL,
    Duration INT NOT NULL
);

CREATE TABLE MoviesLog
(
	LogID INT PRIMARY KEY IDENTITY(1,1),
	MovieID INT NOT NULL,
	MovieTitle VARCHAR(255) NOT NULL,
	ActionPerformed VARCHAR(100) NOT NULL,
	ActionDate	DATETIME  NOT NULL
);

SELECT * FROM Movies
SELECT * FROM MoviesLog

--1.	Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the Movies table. For that, log all operations performed on the Movies table into MoviesLog.


CREATE OR ALTER TRIGGER TR_INSTEAD_MOVIELOG
ON Movies
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @MID INT,@MNAME VARCHAR(250)
	SELECT @MID = MovieID FROM inserted
	SELECT @MNAME=MovieTitle FROM inserted

	INSERT INTO MoviesLog VALUES(@MID,@MNAME,'INSERT',GETDATE())

END

INSERT INTO Movies VALUES (101,'RRR',2022,'ABCD',4.8,3)
DELETE FROM Movies  WHERE MOVIEID=101
DROP TRIGGER TR_INSTEAD_MOVIELOG

CREATE OR ALTER TRIGGER TR_INSTEAD_UPDATE_MOVIELOG
ON Movies
INSTEAD OF UPDATE
AS
BEGIN
	DECLARE @MID INT,@MNAME VARCHAR(250)
	SELECT @MID = MovieID FROM inserted
	SELECT @MNAME=MovieTitle FROM inserted

	INSERT INTO MoviesLog VALUES(@MID,@MNAME,'UPDATE',GETDATE())

END

UPDATE MOVIES SET Genre='ANJHFS'WHERE MOVIEID=101
DROP TRIGGER TR_INSTEAD_UPDATE_MOVIELOG

CREATE OR ALTER TRIGGER TR_INSTEAD_DELETE_MOVIELOG
ON Movies
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @MID INT,@MNAME VARCHAR(250)
	SELECT @MID = MovieID FROM deleted
	SELECT @MNAME=MovieTitle FROM deleted

	INSERT INTO MoviesLog VALUES(@MID,@MNAME,'DELETE',GETDATE())

END

DELETE FROM Movies WHERE MovieID=101
DROP TRIGGER TR_INSTEAD_DELETE_MOVIELOG

--2.	Create a trigger that only allows to insert movies for which Rating is greater than 5.5 .

CREATE OR ALTER TRIGGER TR_RATING
ON Movies
INSTEAD OF INSERT
AS
BEGIN
		DECLARE @MID INT,@RAT DECIMAL(3, 1),@MNAME VARCHAR(255),@RY INT,@GEN VARCHAR(100),@DR INT
		SELECT @MID = MovieID,@MNAME= MovieTitle,@RY=ReleaseYear,@GEN=Genre ,@DR=Duration FROM inserted
		SELECT @RAT= Rating FROM inserted
		IF(@RAT>5.5)
			INSERT INTO Movies VALUES(@MID,@MNAME,@RY,@GEN,@RAT,@DR)
END

INSERT INTO Movies VALUES (102,'RRR',2022,'ABCD',5.9,3)
INSERT INTO Movies VALUES (103,'PUSHPA2',2024,'ABCD',5.3,4)
DROP TRIGGER TR_RATING

--3.	Create trigger that prevent duplicate 'MovieTitle' of Movies table and log details of it in MoviesLog table.

CREATE OR ALTER Trigger tr_prevent_dublicate_MOVIE
on Movies
INSTEAD OF INSERT
AS
BEGIN
		DECLARE @MID INT ,@MNAME VARCHAR(250)
		SELECT @MID= MovieID FROM inserted
		SELECT @MNAME=MovieTitle FROM inserted

		INSERT INTO Movies(MovieID,MovieTitle,ReleaseYear,Genre,Rating,Duration)
		SELECT * FROM inserted
		WHERE MovieTitle NOT IN(SELECT MovieTitle FROM Movies)
		INSERT INTO MoviesLog VALUES (@MID,@MNAME,'DELETE',GETDATE())
END

INSERT INTO Movies VALUES (104,'RRR',2022,'ABCD',5.9,3)
INSERT INTO Movies VALUES (105,'PUSHPA',2024,'ABCD',5.3,4)
DROP TRIGGER tr_prevent_dublicate_MOVIE

--4.	Create trigger that prevents to insert pre-release movies.

CREATE OR ALTER TRIGGER TR_PRE_RELESE
ON Movies
INSTEAD OF INSERT
AS
BEGIN
		DECLARE @RY INT
		SELECT @RY=ReleaseYear FROM inserted

		IF (@RY>GETDATE())
			PRINT 'Cannot insert pre-release movie. '
END

INSERT INTO Movies VALUES (104,'PUSHPA2',2024,'ABCD',5.9,3)

--5.	Develop a trigger to ensure that the Duration of a movie cannot be updated to a value greater than 120 minutes (2 hours) to prevent unrealistic entries.
